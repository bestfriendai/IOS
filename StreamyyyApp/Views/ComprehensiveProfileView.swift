//
//  ComprehensiveProfileView.swift
//  StreamyyyApp
//
//  Complete Profile page with real authentication and user management
//

import SwiftUI
import Combine

struct ComprehensiveProfileView: View {
    @StateObject private var appState = AppStateManager.shared
    
    @State private var showingSignIn = false
    @State private var showingSignUp = false
    @State private var showingSettings = false
    @State private var showingSubscription = false
    @State private var showingProfileEdit = false
    @State private var showingAccountSettings = false
    @State private var showingPlatformConnections = false
    @State private var showingAnalytics = false
    @State private var showingPrivacySettings = false
    @State private var showingSupport = false
    @State private var showingSignOutAlert = false
    @State private var showingDeleteAccountAlert = false
    
    var body: some View {
        NavigationView {
            ZStack {
                backgroundGradient
                
                ScrollView {
                    VStack(spacing: 20) {
                        if appState.isAuthenticated {
                            // Authenticated User Profile
                            authenticatedProfileHeader
                            subscriptionStatusCard
                            userStatsCard
                            profileMenuItems
                        } else {
                            // Guest User Profile
                            guestProfileHeader
                            guestActions
                        }
                        
                        // Common sections for all users
                        appSettingsSection
                        supportSection
                        appInfoSection
                    }
                    .padding(.horizontal, 20)
                    .padding(.top, 16)
                }
            }
            .navigationTitle("Profile")
            .navigationBarTitleDisplayMode(.large)
            .refreshable {
                await appState.refreshAllData()
            }
            .withAppState()
        }
        .sheet(isPresented: $showingSignIn) {
            SignInView(isPresented: $showingSignIn)
        }
        .sheet(isPresented: $showingSignUp) {
            SignUpView(isPresented: $showingSignUp)
        }
        .sheet(isPresented: $showingSettings) {
            ComprehensiveSettingsView()
        }
        .sheet(isPresented: $showingSubscription) {
            SubscriptionManagementView()
        }
        .sheet(isPresented: $showingProfileEdit) {
            ProfileEditView()
        }
        .sheet(isPresented: $showingAccountSettings) {
            AccountManagementView()
        }
        .sheet(isPresented: $showingPlatformConnections) {
            PlatformConnectionsView()
        }
        .sheet(isPresented: $showingAnalytics) {
            AnalyticsDashboardView()
        }
        .sheet(isPresented: $showingPrivacySettings) {
            PrivacySettingsView()
        }
        .sheet(isPresented: $showingSupport) {
            SupportView()
        }
        .alert("Sign Out", isPresented: $showingSignOutAlert) {\n            Button("Cancel", role: .cancel) { }\n            Button("Sign Out", role: .destructive) {\n                Task {\n                    try? await authService.signOut()\n                }\n            }\n        } message: {\n            Text("Are you sure you want to sign out?")\n        }\n        .alert("Delete Account", isPresented: $showingDeleteAccountAlert) {\n            Button("Cancel", role: .cancel) { }\n            Button("Delete", role: .destructive) {\n                Task {\n                    try? await profileManager.deleteAccount()\n                }\n            }\n        } message: {\n            Text("This action cannot be undone. All your data will be permanently deleted.")\n        }\n    }\n    \n    // MARK: - Background\n    private var backgroundGradient: some View {\n        LinearGradient(\n            colors: [\n                Color.black,\n                Color(red: 0.05, green: 0.05, blue: 0.15),\n                Color.black\n            ],\n            startPoint: .topLeading,\n            endPoint: .bottomTrailing\n        )\n        .ignoresSafeArea()\n    }\n    \n    // MARK: - Authenticated User Header\n    private var authenticatedProfileHeader: some View {\n        VStack(spacing: 16) {\n            // Avatar and Name\n            VStack(spacing: 12) {\n                AsyncImage(url: appState.currentUser?.avatarURL) { image in\n                    image\n                        .resizable()\n                        .aspectRatio(contentMode: .fill)\n                } placeholder: {\n                    Circle()\n                        .fill(\n                            LinearGradient(\n                                colors: [Color.purple, Color.cyan],\n                                startPoint: .topLeading,\n                                endPoint: .bottomTrailing\n                            )\n                        )\n                        .overlay(\n                            Text(appState.profileManager.userInitials)\n                                .font(.title)\n                                .fontWeight(.bold)\n                                .foregroundColor(.white)\n                        )\n                }\n                .frame(width: 100, height: 100)\n                .clipShape(Circle())\n                .overlay(\n                    Circle()\n                        .stroke(Color.white.opacity(0.3), lineWidth: 2)\n                )\n                \n                VStack(spacing: 4) {\n                    Text(profileManager.displayName)\n                        .font(.title2)\n                        .fontWeight(.bold)\n                        .foregroundColor(.white)\n                    \n                    if let email = profileManager.userEmail {\n                        Text(email)\n                            .font(.subheadline)\n                            .foregroundColor(.white.opacity(0.7))\n                    }\n                    \n                    HStack(spacing: 16) {\n                        Label(profileManager.memberSince, systemImage: "calendar")\n                            .font(.caption)\n                            .foregroundColor(.white.opacity(0.6))\n                        \n                        Label(userStatsManager.userStats?.lastSeenFormatted ?? "Just now", systemImage: "clock")\n                            .font(.caption)\n                            .foregroundColor(.white.opacity(0.6))\n                    }\n                }\n            }\n            \n            // Quick Edit Button\n            Button(action: {\n                showingProfileEdit = true\n            }) {\n                HStack(spacing: 8) {\n                    Image(systemName: "pencil")\n                        .font(.caption)\n                    Text("Edit Profile")\n                        .font(.subheadline)\n                        .fontWeight(.medium)\n                }\n                .foregroundColor(.cyan)\n                .padding(.horizontal, 16)\n                .padding(.vertical, 8)\n                .background(\n                    RoundedRectangle(cornerRadius: 20)\n                        .fill(Color.cyan.opacity(0.1))\n                        .overlay(\n                            RoundedRectangle(cornerRadius: 20)\n                                .stroke(Color.cyan.opacity(0.3), lineWidth: 1)\n                        )\n                )\n            }\n        }\n        .padding()\n        .background(\n            RoundedRectangle(cornerRadius: 16)\n                .fill(.ultraThinMaterial)\n        )\n    }\n    \n    // MARK: - Guest User Header\n    private var guestProfileHeader: some View {\n        VStack(spacing: 16) {\n            Circle()\n                .fill(\n                    LinearGradient(\n                        colors: [Color.gray, Color.gray.opacity(0.7)],\n                        startPoint: .topLeading,\n                        endPoint: .bottomTrailing\n                    )\n                )\n                .frame(width: 80, height: 80)\n                .overlay(\n                    Image(systemName: "person.fill")\n                        .font(.system(size: 32, weight: .medium))\n                        .foregroundColor(.white)\n                )\n            \n            VStack(spacing: 8) {\n                Text("Welcome to StreamHub")\n                    .font(.title2)\n                    .fontWeight(.bold)\n                    .foregroundColor(.white)\n                \n                Text("Sign in to unlock personalized features and premium content")\n                    .font(.subheadline)\n                    .foregroundColor(.white.opacity(0.7))\n                    .multilineTextAlignment(.center)\n            }\n        }\n        .padding()\n        .background(\n            RoundedRectangle(cornerRadius: 16)\n                .fill(.ultraThinMaterial)\n        )\n    }\n    \n    // MARK: - Guest Actions\n    private var guestActions: some View {\n        VStack(spacing: 12) {\n            Button(action: {\n                showingSignIn = true\n            }) {\n                HStack {\n                    Image(systemName: "person.badge.key.fill")\n                        .font(.title3)\n                    Text("Sign In")\n                        .font(.headline)\n                        .fontWeight(.semibold)\n                }\n                .frame(maxWidth: .infinity)\n                .padding()\n                .background(\n                    LinearGradient(\n                        colors: [Color.purple, Color.purple.opacity(0.8)],\n                        startPoint: .leading,\n                        endPoint: .trailing\n                    )\n                )\n                .foregroundColor(.white)\n                .cornerRadius(12)\n            }\n            \n            Button(action: {\n                showingSignUp = true\n            }) {\n                HStack {\n                    Image(systemName: "person.badge.plus")\n                        .font(.title3)\n                    Text("Create Account")\n                        .font(.headline)\n                        .fontWeight(.semibold)\n                }\n                .frame(maxWidth: .infinity)\n                .padding()\n                .background(\n                    RoundedRectangle(cornerRadius: 12)\n                        .stroke(Color.cyan, lineWidth: 2)\n                        .background(\n                            RoundedRectangle(cornerRadius: 12)\n                                .fill(Color.cyan.opacity(0.1))\n                        )\n                )\n                .foregroundColor(.cyan)\n            }\n        }\n        .padding()\n        .background(\n            RoundedRectangle(cornerRadius: 16)\n                .fill(.ultraThinMaterial)\n        )\n    }\n    \n    // MARK: - Subscription Status Card\n    private var subscriptionStatusCard: some View {\n        VStack(spacing: 16) {\n            HStack {\n                VStack(alignment: .leading, spacing: 8) {\n                    HStack(spacing: 8) {\n                        Image(systemName: subscriptionManager.isSubscribed ? "crown.fill" : "crown")\n                            .foregroundColor(subscriptionManager.isSubscribed ? .yellow : .gray)\n                            .font(.title2)\n                        \n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(subscriptionManager.subscriptionDisplayName)\n                                .font(.headline)\n                                .fontWeight(.bold)\n                                .foregroundColor(.white)\n                            \n                            if subscriptionManager.isSubscribed {\n                                Text("Active until \\(subscriptionManager.formattedNextBillingDate)")\n                                    .font(.caption)\n                                    .foregroundColor(.white.opacity(0.7))\n                            } else {\n                                Text("Upgrade to unlock premium features")\n                                    .font(.caption)\n                                    .foregroundColor(.white.opacity(0.7))\n                            }\n                        }\n                    }\n                    \n                    if subscriptionManager.isInTrial {\n                        HStack(spacing: 4) {\n                            Image(systemName: "clock.fill")\n                                .foregroundColor(.orange)\n                                .font(.caption)\n                            Text("\\(subscriptionManager.trialDaysRemaining) days left in trial")\n                                .font(.caption)\n                                .foregroundColor(.orange)\n                        }\n                    }\n                }\n                \n                Spacer()\n                \n                Button(subscriptionManager.isSubscribed ? "Manage" : "Upgrade") {\n                    showingSubscription = true\n                }\n                .font(.subheadline)\n                .fontWeight(.semibold)\n                .foregroundColor(.white)\n                .padding(.horizontal, 16)\n                .padding(.vertical, 8)\n                .background(\n                    RoundedRectangle(cornerRadius: 8)\n                        .fill(subscriptionManager.isSubscribed ? Color.blue : Color.purple)\n                )\n            }\n            \n            if !subscriptionManager.isSubscribed {\n                // Premium Features Preview\n                VStack(alignment: .leading, spacing: 12) {\n                    Text("Premium Features")\n                        .font(.subheadline)\n                        .fontWeight(.semibold)\n                        .foregroundColor(.white.opacity(0.9))\n                    \n                    LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 12) {\n                        PremiumFeatureItem(icon: "infinity", title: "Unlimited Streams")\n                        PremiumFeatureItem(icon: "hd.circle.fill", title: "4K Quality")\n                        PremiumFeatureItem(icon: "bell.fill", title: "Live Notifications")\n                        PremiumFeatureItem(icon: "heart.fill", title: "Unlimited Favorites")\n                    }\n                }\n            }\n        }\n        .padding()\n        .background(\n            RoundedRectangle(cornerRadius: 16)\n                .fill(\n                    subscriptionManager.isSubscribed ?\n                    LinearGradient(colors: [Color.purple.opacity(0.2), Color.blue.opacity(0.2)], startPoint: .topLeading, endPoint: .bottomTrailing) :\n                    Color.white.opacity(0.05)\n                )\n                .overlay(\n                    RoundedRectangle(cornerRadius: 16)\n                        .stroke(\n                            subscriptionManager.isSubscribed ? Color.purple.opacity(0.4) : Color.white.opacity(0.1),\n                            lineWidth: 1\n                        )\n                )\n        )\n    }\n    \n    // MARK: - User Stats Card\n    private var userStatsCard: some View {\n        VStack(spacing: 16) {\n            HStack {\n                Text("Your Activity")\n                    .font(.headline)\n                    .fontWeight(.bold)\n                    .foregroundColor(.white)\n                \n                Spacer()\n                \n                Button("View Details") {\n                    showingAnalytics = true\n                }\n                .font(.caption)\n                .foregroundColor(.cyan)\n            }\n            \n            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 3), spacing: 16) {\n                StatCard(\n                    title: "Streams",\n                    value: "\\(userStatsManager.totalStreamsWatched)",\n                    icon: "play.circle.fill",\n                    color: .purple\n                )\n                \n                StatCard(\n                    title: "Watch Time",\n                    value: userStatsManager.formattedWatchTime,\n                    icon: "clock.fill",\n                    color: .blue\n                )\n                \n                StatCard(\n                    title: "Favorites",\n                    value: "\\(userStatsManager.favoriteStreams)",\n                    icon: "heart.fill",\n                    color: .pink\n                )\n            }\n            \n            if let platform = userStatsManager.mostWatchedPlatform {\n                HStack {\n                    Image(systemName: platform.systemImage)\n                        .foregroundColor(platform.color)\n                    Text("Most watched: \\(platform.displayName)")\n                        .font(.caption)\n                        .foregroundColor(.white.opacity(0.7))\n                    Spacer()\n                }\n            }\n        }\n        .padding()\n        .background(\n            RoundedRectangle(cornerRadius: 16)\n                .fill(.ultraThinMaterial)\n        )\n    }\n    \n    // MARK: - Profile Menu Items\n    private var profileMenuItems: some View {\n        VStack(spacing: 0) {\n            ProfileMenuItem(\n                icon: "person.crop.circle",\n                title: "Account Settings",\n                subtitle: "Password, email, security",\n                showChevron: true\n            ) {\n                showingAccountSettings = true\n            }\n            \n            Divider().padding(.leading, 60)\n            \n            ProfileMenuItem(\n                icon: "link.circle",\n                title: "Platform Connections",\n                subtitle: "Twitch, YouTube, Kick",\n                showChevron: true\n            ) {\n                showingPlatformConnections = true\n            }\n            \n            Divider().padding(.leading, 60)\n            \n            ProfileMenuItem(\n                icon: "chart.bar.fill",\n                title: "Analytics Dashboard",\n                subtitle: "Detailed viewing statistics",\n                showChevron: true\n            ) {\n                showingAnalytics = true\n            }\n            \n            Divider().padding(.leading, 60)\n            \n            ProfileMenuItem(\n                icon: "hand.raised.fill",\n                title: "Privacy & Data",\n                subtitle: "Control your data and privacy",\n                showChevron: true\n            ) {\n                showingPrivacySettings = true\n            }\n            \n            Divider().padding(.leading, 60)\n            \n            ProfileMenuItem(\n                icon: "rectangle.portrait.and.arrow.right",\n                title: "Sign Out",\n                subtitle: "Sign out of your account",\n                color: .red,\n                showChevron: false\n            ) {\n                showingSignOutAlert = true\n            }\n        }\n        .background(\n            RoundedRectangle(cornerRadius: 16)\n                .fill(.ultraThinMaterial)\n        )\n    }\n    \n    // MARK: - App Settings Section\n    private var appSettingsSection: some View {\n        VStack(spacing: 0) {\n            ProfileMenuItem(\n                icon: "gearshape.fill",\n                title: "App Settings",\n                subtitle: "Preferences and configuration",\n                showChevron: true\n            ) {\n                showingSettings = true\n            }\n        }\n        .background(\n            RoundedRectangle(cornerRadius: 16)\n                .fill(.ultraThinMaterial)\n        )\n    }\n    \n    // MARK: - Support Section\n    private var supportSection: some View {\n        VStack(spacing: 0) {\n            ProfileMenuItem(\n                icon: "questionmark.circle.fill",\n                title: "Help & Support",\n                subtitle: "Get help and contact support",\n                showChevron: true\n            ) {\n                showingSupport = true\n            }\n            \n            Divider().padding(.leading, 60)\n            \n            ProfileMenuItem(\n                icon: "star.fill",\n                title: "Rate App",\n                subtitle: "Share your feedback on the App Store",\n                showChevron: true\n            ) {\n                openAppStore()\n            }\n        }\n        .background(\n            RoundedRectangle(cornerRadius: 16)\n                .fill(.ultraThinMaterial)\n        )\n    }\n    \n    // MARK: - App Info Section\n    private var appInfoSection: some View {\n        VStack(spacing: 12) {\n            Text("StreamHub")\n                .font(.headline)\n                .fontWeight(.bold)\n                .foregroundColor(.white)\n            \n            Text("Version \\(Config.App.version) (\\(Config.App.build))")\n                .font(.subheadline)\n                .foregroundColor(.white.opacity(0.7))\n            \n            Text("© 2024 StreamHub Team")\n                .font(.caption)\n                .foregroundColor(.white.opacity(0.5))\n            \n            HStack(spacing: 20) {\n                Link("Privacy Policy", destination: URL(string: Config.URLs.privacyPolicy)!)\n                    .font(.caption)\n                    .foregroundColor(.cyan)\n                \n                Link("Terms of Service", destination: URL(string: Config.URLs.termsOfService)!)\n                    .font(.caption)\n                    .foregroundColor(.cyan)\n            }\n        }\n        .padding()\n        .background(\n            RoundedRectangle(cornerRadius: 16)\n                .fill(.ultraThinMaterial)\n        )\n    }\n    \n    // MARK: - Helper Methods\n    private func refreshAllData() async {\n        await withTaskGroup(of: Void.self) { group in\n            group.addTask {\n                await profileManager.refreshProfile()\n            }\n            group.addTask {\n                await subscriptionManager.refreshSubscription()\n            }\n            group.addTask {\n                await userStatsManager.refreshStats()\n            }\n            if authService.isAuthenticated {\n                group.addTask {\n                    await authService.refreshAuthentication()\n                }\n            }\n        }\n    }\n    \n    private func openAppStore() {\n        if let url = URL(string: Config.URLs.appStore) {\n            UIApplication.shared.open(url)\n        }\n    }\n}\n\n// MARK: - Supporting Views\n\nstruct PremiumFeatureItem: View {\n    let icon: String\n    let title: String\n    \n    var body: some View {\n        HStack(spacing: 8) {\n            Image(systemName: icon)\n                .font(.caption)\n                .foregroundColor(.purple)\n                .frame(width: 16, height: 16)\n            \n            Text(title)\n                .font(.caption)\n                .foregroundColor(.white.opacity(0.8))\n                .lineLimit(1)\n            \n            Spacer(minLength: 0)\n        }\n    }\n}\n\nstruct StatCard: View {\n    let title: String\n    let value: String\n    let icon: String\n    let color: Color\n    \n    var body: some View {\n        VStack(spacing: 8) {\n            Image(systemName: icon)\n                .font(.title2)\n                .foregroundColor(color)\n            \n            Text(value)\n                .font(.headline)\n                .fontWeight(.bold)\n                .foregroundColor(.white)\n            \n            Text(title)\n                .font(.caption)\n                .foregroundColor(.white.opacity(0.7))\n                .multilineTextAlignment(.center)\n                .lineLimit(2)\n        }\n        .frame(maxWidth: .infinity)\n        .padding(.vertical, 12)\n        .background(\n            RoundedRectangle(cornerRadius: 12)\n                .fill(color.opacity(0.1))\n                .overlay(\n                    RoundedRectangle(cornerRadius: 12)\n                        .stroke(color.opacity(0.3), lineWidth: 1)\n                )\n        )\n    }\n}\n\nstruct ProfileMenuItem: View {\n    let icon: String\n    let title: String\n    let subtitle: String\n    var color: Color = .white\n    var showChevron: Bool = true\n    let action: () -> Void\n    \n    var body: some View {\n        Button(action: action) {\n            HStack(spacing: 16) {\n                Image(systemName: icon)\n                    .font(.title2)\n                    .foregroundColor(color == .white ? .cyan : color)\n                    .frame(width: 24, height: 24)\n                \n                VStack(alignment: .leading, spacing: 2) {\n                    Text(title)\n                        .font(.headline)\n                        .foregroundColor(color)\n                    \n                    Text(subtitle)\n                        .font(.subheadline)\n                        .foregroundColor(.white.opacity(0.6))\n                }\n                \n                Spacer()\n                \n                if showChevron {\n                    Image(systemName: "chevron.right")\n                        .font(.caption)\n                        .foregroundColor(.white.opacity(0.4))\n                }\n            }\n            .padding()\n            .contentShape(Rectangle())\n        }\n        .buttonStyle(PlainButtonStyle())\n    }\n}\n\n#Preview {\n    ComprehensiveProfileView()\n}"